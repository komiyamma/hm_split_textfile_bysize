<!DOCTYPE html>
<head>
    <title>HmSplitTextFileByRegex</title>
</head>
<body>
<br>
<button id="button_1">タイプ１で分割する</button><br>
<br>
<button id="button_2">タイプ２で分割する</button><br>
<br>
<button id="button_3">タイプ３で分割する</button><br>
<br>
<span id="info_1"></span>

<script>
    // ボタンを取得
    const btn_1 = document.getElementById("button_1");
    const btn_2 = document.getElementById("button_2");
    const btn_3 = document.getElementById("button_3");
    const info_1 = document.getElementById("info_1");


    let idCallback=0;

/*
	strDivFileCount = params.get('strDivFileCount');
    let strIDCallBack = params.get('strIDCallBack');
    idCallback = Number(strIDCallBack);
*/

    if (btn_1==null) {
        console.log("NO");
    }

    // ボタンがクリックされた時の処理。行数をjsonテキストにして、秀丸マクロのjsmode内関数を呼び出す(引数にjson_text)を渡す
    btn_1.addEventListener("click", () => {
        try {
	        console.log("OK");
	        let message_obj = {
	            divtype: 1
	        };
	        let json_text = JSON.stringify(message_obj);
	        if (idCallback > 0) {
	            window.chrome.webview.postMessage({funcid:idCallback, message:json_text});
	        } else {
	            console.log("NO";
	        }
        } catch(err) {
            console.log(err);
        }
    });
    btn_2.addEventListener("click", function() {
        console.log("OK");
        let message_obj = {
            divtype: 2
        };
        let json_text = JSON.stringify(message_obj);
        if (idCallback > 0) {
            window.chrome.webview.postMessage({funcid:idCallback, message:json_text});
        }
    });
    btn_3.addEventListener("click", function() {
        console.log("OK");
        let message_obj = {
            divtype: 3
        };
        let json_text = JSON.stringify(message_obj);
        if (idCallback > 0) {
            window.chrome.webview.postMessage({funcid:idCallback, message:json_text});
        }
    });
</script>
</body>
</html>