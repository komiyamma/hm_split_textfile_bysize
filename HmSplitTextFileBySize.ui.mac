/*
 * HmSplitTextFileBySize v1.0.6.1
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

hidemaruversion "9.25.99";

jsmode "WebView2\\HmSplitTextFileBySize";

js {
objHmSplitTextFileBySizeUI?._destructor();
class HmSplitTextFileBySizeUI {
    static currentmacrodir = currentmacrodirectory();
    // 開始時点でファイルサイズは控えておく
    static nFileSizeAtStart = existfile(hidemaru.getFileFullPath(), 2);
    // ラベルはこのマクロ独自にしておく
    static strTargetLabel = "HmSplitTextFileBySize";
    constructor() {
        HmSplitTextFileBySizeUI.throwIfNotFileName();
        HmSplitTextFileBySizeUI.openRenderPane();
        HmSplitTextFileBySizeUI.setInitializeInterval();
        HmSplitTextFileBySizeUI.setUpdateInterval();
    }
    _destructor() {
        HmSplitTextFileBySizeUI.clearInitializeInterval();
        HmSplitTextFileBySizeUI.clearUpdateInterval();
    }
    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }
    static throwIfNotFileName() {
        // ファイル名無しは対象にしない
        if (!hidemaru.getFileFullPath()) {
            HmSplitTextFileBySizeUI.outputAlert("ファイル名が付いているファイルのみ対象とします。");
            HmSplitTextFileBySizeUI.throwCancelException();
        }
    }
    static throwCancelException() {
        throw "実行をキャンセルしました。";
    }
    // レンダリングペインを開く
    static openRenderPane() {
        // カレントマクロフォルダのhtmlファイルを使う
        let absoluteUrl = new URL(HmSplitTextFileBySizeUI.currentmacrodir + "\\" + "HmSplitTextFileBySize.ui.html");
        let idCallback = hidemaru.getFunctionId(HmSplitTextFileBySizeUI.onInputHtmlButtonClick);
        let params = new URLSearchParams();
        params.set('strIDCallBack', String(idCallback));
        params.set('strAllByteSize', String(HmSplitTextFileBySizeUI.nFileSizeAtStart));
        absoluteUrl.search = params.toString();
        let strUrl = absoluteUrl.href; // オブジェクトから実際のUrl文字列へ
        const json_arg = {
            target: HmSplitTextFileBySizeUI.strTargetLabel,
            uri: strUrl,
            show: 1,
            place: "leftside",
            size: 240,
            initialize: "async",
        };
        renderpanecommand(json_arg);
    }
    // 本当にレンダリングペインが開いて準備がととのったのかのチェック
    static tickCheckComplete() {
        let readyState = renderpanecommand({ target: HmSplitTextFileBySizeUI.strTargetLabel, get: "readyState" });
        if (readyState == "complete") {
            hidemaru.clearInterval(HmSplitTextFileBySizeUI.idIntervalInitialize);
            HmSplitTextFileBySizeUI.onRenderPaneShown();
        }
    }
    // レンダリングペインに対して、現在のファイルのバイト数を送信する。
    static tickCheckCloseRenderPane() {
        let readyState = renderpanecommand({ target: HmSplitTextFileBySizeUI.strTargetLabel, get: "readyState" });
        if (readyState == "complete") {
            ;
        }
        let isShowNow = renderpanecommand({ target: HmSplitTextFileBySizeUI.strTargetLabel, get: "show" });
        if (isShowNow == "0") {
            HmSplitTextFileBySizeUI.clearInitializeInterval();
            HmSplitTextFileBySizeUI.clearUpdateInterval();
        }
    }
    // レンダリングペインが完全に表示されたら、
    // このJS内にある「onInputHtmlButtonClick_HmSplitTextFileBySize」関数をレンダリングペインから呼び出せるように関数のIDを渡す。
    // また、「レンダリングペインを操作するのよ～」ということがわかりやすいように、レンダリングペイン側にフォーカスを移す
    static onRenderPaneShown() {
        renderpanecommand({
            target: HmSplitTextFileBySizeUI.strTargetLabel,
            focus: 1,
        });
    }
    // HTML側で「ボタン」を押すと、これが呼ばれる
    static onInputHtmlButtonClick(json_text) {
        try {
            HmSplitTextFileBySizeUI.clearUpdateInterval();
            renderpanecommand({
                target: HmSplitTextFileBySizeUI.strTargetLabel,
                show: 0,
            });
            // json_textの状態で、inputフィールドに入っているテキストが渡ってくるので、その数値を渡す
            let json_obj = JSON.parse(json_text);
            let nDivFileKiroByteSize = json_obj.input_1;
            if (nDivFileKiroByteSize == "") {
                HmSplitTextFileBySizeUI.throwCancelException();
            }
            let peRetry = hidemaru.setInterval(()=>{
                let isScheduled = hidemaru.postExecMacroFile(HmSplitTextFileBySizeUI.currentmacrodir + "\\" + "HmSplitTextFileBySize.main.mac", nDivFileKiroByteSize) ?? 1;
                if (isScheduled) { hidemaru.clearInterval(peRetry); }
            }, 100);
            
        } catch(err) {
            HmSplitTextFileBySizeUI.outputAlert(err);
        }
    }
    static idIntervalInitialize;
    static idIntervalUpdate;
    static setInitializeInterval() {
        // 最初のレンダリングペインCompleteチェック用のものは、比較的細やかにチェックする。
        HmSplitTextFileBySizeUI.idIntervalInitialize = hidemaru.setInterval(HmSplitTextFileBySizeUI.tickCheckComplete, 300);
    }
    static clearInitializeInterval() {
        if (typeof (HmSplitTextFileBySizeUI.idIntervalInitialize) != "undefined") {
            hidemaru.clearInterval(HmSplitTextFileBySizeUI.idIntervalInitialize);
        }
    }
    static setUpdateInterval() {
        // 全体の行数の変化にはおおらかに対応する。
        HmSplitTextFileBySizeUI.idIntervalUpdate = hidemaru.setInterval(HmSplitTextFileBySizeUI.tickCheckCloseRenderPane, 2000);
    }
    static clearUpdateInterval() {
        if (typeof (HmSplitTextFileBySizeUI.idIntervalUpdate) != "undefined") {
            hidemaru.clearInterval(HmSplitTextFileBySizeUI.idIntervalUpdate);
        }
    }
}
try {
    var objHmSplitTextFileBySizeUI = new HmSplitTextFileBySizeUI();
}
catch (err) {
    HmSplitTextFileBySizeUI.outputAlert(err);
    objHmSplitTextFileBySizeUI?._destructor();
}

} // js

