/*
 * HmSplitTextFileByRegex v1.0.1.0
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

/*


/*

let allText = "あいうえお\r\nかきくけこ\r\nさしすせそ\r\nたちつてと\r\n";

function copyText(allText, linenoStart, columnStart, linenoEnd, columnEnd) {
    let lines = allText.split(/\r?\n/);
    let result = "";

    for (let i = linenoStart - 1; i <= linenoEnd - 1; i++) {
        let line = lines[i];
        if (i === linenoStart - 1) {
            result += line.substring(columnStart - 1, columnEnd);
        } else if (i === linenoEnd - 1) {
            result += "\r\n" + line.substring(0, columnEnd);
        } else {
            result += "\r\n" + line;
        }
    }

    return result;
}

*/


hidemaruversion "9.25.99";

// setcompatiblemode 0x00020000; // ユーザーが利用する普段の検索条件を保存しておき、このマクロ終了後に元へと戻す。

jsmode "WebView2";
js {

    deletecolormarkerall(findmarker());
    gofiletop();
    const op_casesense = 0x00000002; // 秀丸のsearchdown関数のcasesenseと同じ意味
    const op_regular   = 0x00000010; // 秀丸のsearchdown関数のregularと同じ意味
    const op_hilight   = 0x00003800; // 秀丸のsearchdown関数のhilightと同じ意味
    const op_loop     =  0x01000000; // 秀丸のsearchdown関数のloopと同じ意味
    searchdialog("分離したい箇所のパターンの正規表現の入力" , op_regular|op_hilight|op_casesense|op_loop);
    colormarkerallfound();


let   //平坦に取得
  objFormat = {
    unit:"wcs",
    layer:findmarker(),
    items:[
      {line1:"*",col1:"*",line2:"*",col2:"*",},
    ]
  };


/*
    let objFormat = {
    layer:findmarker(),
    items:[
      {line1:"*",col1:"*",line2:"*",col2:"*",},
    ]
  };
*/
    let info2 = getcolormarker(objFormat);

    console.log(JSON.stringify(info2));


debuginfo(2);
const absoluteUrl = new URL(currentmacrodirectory() + "\\" + "HmSplitTextFileByRegex.html").href;

const strTargetLabel = "HmSplitTextFileByRegex";

const json_arg = {
    target: strTargetLabel,
    uri: absoluteUrl,
    show: 1,
    place: "leftside",
};

strUri = renderpanecommand(json_arg);

function tryComplete_HmSplitTextFileByRegexp() {
    //実行の順番(3) 繰り返し
    var readyState = renderpanecommand({ target: strTargetLabel, get: "readyState" });
    console.log(readyState);
    if (readyState == "complete") {
        hidemaru.clearInterval(idInterval_HmSplitTextFileByRegexp);
        onRenderPaneShown_HmSplitTextFileByRegexp();
    }
}

function onRenderPaneShown_HmSplitTextFileByRegexp() {
    //実行の順番(4)
    console.log("bind");
    var idCallback = hidemaru.getFunctionId(onHtmlInputStable_HmSplitTextFileByRegexp);
    renderpanecommand({
        target: strTargetLabel,
        uri: 'javascript:idCallback=' + idCallback + ';',
    });
}


function onHtmlInputStable_HmSplitTextFileByRegexp(text) {

	let $json = """
	  {
	    "layer": "HmSplitTextFileByRegex",
	    "kind": "erase",
	    "wave":"#FF0000",
	    "items": [
	      {"line1":1,"col1":0,"line2":2,"col2":0},
	      {"line1":4,"col1":0,"line2":5,"col2":0},
	      {"line1":6,"col1":0,"line2":7,"col2":0,"wave":"#FFFF00"},
	    ]
	  }
	  """;
	colormarker($json);


    console.log(text);
}



// 次のマクロ実行の際に見るのでletではなくvarにして、ライフサイクルを js { } 外に伸ばす必要がある。
// 他のjsを使った秀丸マクロと決して被らない名前にしておく必要がある。
var idInterval_HmSplitTextFileByRegexp;
if (typeof (idInterval_HmSplitTextFileByRegexp) != "undefined") {
    hidemaru.clearInterval(idInterval_HmSplitTextFileByRegexp);
}
idInterval_HmSplitTextFileByRegexp = hidemaru.setInterval(tryComplete_HmSplitTextFileByRegexp, 300);


} // js

